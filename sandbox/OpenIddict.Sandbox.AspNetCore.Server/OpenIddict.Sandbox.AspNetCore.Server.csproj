<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFrameworks>net48;net8.0</TargetFrameworks>
    <IsShipping>false</IsShipping>
    <SignAssembly>false</SignAssembly>
    <TypeScriptEnabled>false</TypeScriptEnabled>
    <Nullable>disable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\OpenIddict.AspNetCore\OpenIddict.AspNetCore.csproj" />
    <ProjectReference Include="..\..\src\OpenIddict.EntityFrameworkCore\OpenIddict.EntityFrameworkCore.csproj" />
    <ProjectReference Include="..\..\src\OpenIddict.MongoDb\OpenIddict.MongoDb.csproj" />
    <ProjectReference Include="..\..\src\OpenIddict.Quartz\OpenIddict.Quartz.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" />
    <PackageReference Include="Quartz.Extensions.Hosting" />
  </ItemGroup>

  <ItemGroup
    Condition=" ('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And $([MSBuild]::VersionLessThan($(TargetFrameworkVersion), '3.0'))) Or
                ('$(TargetFrameworkIdentifier)' == '.NETFramework') Or
                ('$(TargetFrameworkIdentifier)' == '.NETStandard') ">
    <PackageReference Include="Microsoft.AspNetCore" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc" />
    <PackageReference Include="Microsoft.AspNetCore.StaticFiles" />
  </ItemGroup>

  <!--
    Note: Entity Framework Core 2.x references System.Interactive.Async 3.x, that includes
    its own IAsyncEnumerable. To work around collisions between this type and the new type
    now included in the BCL (System.Runtime), an alias is added to System.Interactive.Async.
  -->

  <Target Name="AddAssemblyAliasToReactiveAsync" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <ReferencePath Condition=" '%(FileName)' == 'System.Interactive.Async' ">
        <Aliases>reactive</Aliases>
      </ReferencePath>
    </ItemGroup>
  </Target>

</Project>
