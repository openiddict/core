/*
 * Licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 * See https://github.com/openiddict/openiddict-core for more information concerning
 * the license and the contributors participating to this project.
 */

using Properties = OpenIddict.Client.WebIntegration.OpenIddictClientWebIntegrationConstants.Properties;

namespace OpenIddict.Client.WebIntegration;

/// <summary>
/// Exposes companion extensions for the OpenIddict client Web integration.
/// </summary>
public static partial class OpenIddictClientWebIntegrationHelpers
{
    /// <summary>
    /// Resolves the name of the provider associated with the client registration or
    /// <see langword="null" /> if no provider information is attached to the registration.
    /// </summary>
    /// <param name="registration">The client registration.</param>
    /// <returns>The provider name, if applicable.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="registration"/> is null.</exception>
    public static string? GetProviderName(this OpenIddictClientRegistration registration)
    {
        if (registration is null)
        {
            throw new ArgumentNullException(nameof(registration));
        }

        return registration.Properties.TryGetValue(Properties.ProviderName, out var provider)
            && provider is string value ? value : null;
    }

    /// <summary>
    /// Resolves the provider options associated with the client registration or
    /// <see langword="null" /> if no provider information is attached to the registration or if
    /// the actual setting information doesn't match the specified <typeparamref name="TOptions"/>.
    /// </summary>
    /// <typeparam name="TOptions">The type of the provider options.</typeparam>
    /// <param name="registration">The client registration.</param>
    /// <returns>The provider options, if applicable.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="registration"/> is null.</exception>
    public static TOptions? GetProviderOptions<TOptions>(this OpenIddictClientRegistration registration)
    {
        if (registration is null)
        {
            throw new ArgumentNullException(nameof(registration));
        }

        return registration.Properties.TryGetValue(Properties.ProviderOptions, out var value)
            && value is TOptions options ? options : default;

        // Note: provider-specific helpers are automatically generated by the source generator.
    }
}
